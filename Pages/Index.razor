@page "/"
@inject IJSRuntime JSRuntime;

<PageTitle>
    Timezone Converter
</PageTitle>

<div class="w-25 p-3">
    <TimeInput TValue="TimeOnly" @bind-Value="SourceTime" />
</div>
<div>
    Source Timezone
    <InputSelect style="width: 33%;" @bind-Value="SourceTimezone">
        @foreach (string t in Timezones)
        {
            <option value="@t">@t</option>
        }
    </InputSelect>
</div>
<div>
    Target Timezone
    <InputSelect @bind-Value="TargetTimezone">
        @foreach (string t in Timezones)
        {
            <option value="@t">@t</option>
        }
    </InputSelect>
</div>
<div>
    <Button class="btn btn-primary" @onclick="Convert">Convert</Button>
</div>
<div>
    <span>Converted time: @TargetTime.ToString("HH:mm")</span>
</div>

@code {

    public List<string> Timezones { get; set; } = new List<string>();
    public string? SourceTimezone { get; set; }
    public string? TargetTimezone { get; set; }
    public TimeOnly SourceTime { get; set; }
    public TimeOnly TargetTime { get; set; }
    public TimeZoneInfo? localTimeZone { get; set; }
#pragma warning disable CS1998
    protected override async Task OnInitializedAsync()
    {
        // SourceTime = TimeOnly.FromDateTime(DateTime.Now);
        Timezones = TZConvert.KnownIanaTimeZoneNames.OrderBy(t => t).ToList();
        // localTimeZone = TZConvert.GetTimeZoneInfo(TimeZoneInfo.Local.Id);
        // SourceTimezone = TZConvert.WindowsToIana(localTimeZone.Id);
        // TargetTimezone = SourceTimezone;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            DateTime UserDate = await JSRuntime.InvokeAsync<DateTime>("localDate");
            string localTimezoneJS = await JSRuntime.InvokeAsync<string>("localZone");
            localTimeZone = TZConvert.GetTimeZoneInfo(localTimezoneJS);
            SourceTimezone = TZConvert.WindowsToIana(localTimeZone.Id);
            TargetTimezone = SourceTimezone;
            SourceTime = TimeOnly.FromDateTime(UserDate);
            StateHasChanged();
        }
    }

    public void Convert()
    {
        DateTime sourceDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, SourceTime.Hour, SourceTime.Minute, SourceTime.Second);
        if (TargetTimezone is not null && localTimeZone is not null)
        {
            TimeZoneInfo targetTZ = TZConvert.GetTimeZoneInfo(TargetTimezone);
            DateTime targetDate = TimeZoneInfo.ConvertTime(sourceDate, localTimeZone, targetTZ);
            TargetTime = new TimeOnly(targetDate.Hour, targetDate.Minute, targetDate.Second);
        }
        StateHasChanged();
    }
}